---
- name: create temporary folder on local
  tempfile:
    state: directory
    suffix: jdvdeploy
  register: localsrc
  delegate_to: localhost
  when: (deploylist is defined) and (gitrepo is defined)

- name: create directory source on local
  file:
    path: "{{ localsrc.path }}/src/"
    state: directory
    mode: 0755
  delegate_to: localhost
  when: (deploylist is defined) and (gitrepo is defined)

- name: create directory source
  file:
    path: "{{ localsrc.path }}/target/"
    state: directory
    mode: 0755
  delegate_to: localhost
  when: (deploylist is defined) and (gitrepo is defined)

- name: Clone Git Repository
  git:
    repo: "{{ gitrepo }}"
    dest: "{{ localsrc.path }}/src"
  delegate_to: localhost
  when: (deploylist is defined) and (gitrepo is defined)

- name: Clean git repo
  shell: "rm -rf {{ localsrc.path }}/src/.git && rm -rf {{ localsrc.path }}/src/.project"
  args:
      chdir: /home/{{ user['name'] }}
      executable: /bin/bash
  delegate_to: localhost
  when: (deploylist is defined) and (gitrepo is defined)

- name: Copy release vdb
  shell: "cp -f {{ localsrc.path }}/src/{{ item }} {{ localsrc.path }}/target/"
  args:
      chdir: /home/{{ user['name'] }}
      executable: /bin/bash
  with_items: '{{ deploylist }}'
  delegate_to: localhost
  when: (deploylist is defined) and (gitrepo is defined)

- name: list deploy file
  shell: "ls {{ localsrc.path }}/target/"
  args:
      chdir: /home/{{ user['name'] }}
      executable: /bin/bash
  register: deployfiles
  delegate_to: localhost
  when: (deploylist is defined) and (gitrepo is defined)

- name: create deploy file
  file:
    path: "{{ localsrc.path }}/target/{{ item }}.dodeploy"
    state: touch
    mode: 0755
  with_items: "{{ deployfiles.stdout_lines }}"
  delegate_to: localhost
  when: (( (deploylist is defined) and (gitrepo is defined) ) and deploy_domain is not defined )

- name: create temporary folder
  tempfile:
    state: directory
    suffix: jdvdeploy
  register: deploysrc
  when: (deploylist is defined) and (gitrepo is defined)

- name: copy git directory 
  shell: "scp -r {{ localsrc.path }}/target {{ inventory_hostname }}:{{ deploysrc.path }}"
  args:
      chdir: /home/{{ user['name'] }}
      executable: /bin/bash
  delegate_to: localhost
  when: (deploylist is defined) and (gitrepo is defined)

- name: do deploy file
  shell: "cp -f {{ deploysrc.path }}/target/* {{ jdvhome }}/deployments/"
  args:
      chdir: /home/{{ user['name'] }}
      executable: /bin/bash
  when:  (( (deploylist is defined) and (gitrepo is defined) ) and deploy_domain is not defined )

- name: wait for deploy to finish
  wait_for:
      path: "{{ jdvhome }}/deployments/{{ item }}.deployed"
      state: present
      msg: "Timeout 1 minutes reached for wait for deploy {{ item }}"
      delay: 10
      timeout: 60
  with_items: "{{ deployfiles.stdout_lines }}"
  when: ((((deploylist is defined) and (gitrepo is defined)) and (deployfiles.stdout_lines|length > 0)) and deploy_domain is not defined )

- name: do deploy domain
  shell: '{{ jdv_base }}bin/jboss-cli.sh --connect controller={{ inventory_hostname }}:9999 --command="deploy {{ deploysrc.path }}/target/{{ item }} --server-groups={{ jdv_server_group }}"'
  args:
      chdir: /home/{{ user['name'] }}
      executable: /bin/bash
  with_items: "{{ deployfiles.stdout_lines }}"
  when:  (( (deploylist is defined) and (gitrepo is defined) ) and deploy_domain is defined )